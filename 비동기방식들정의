1.callback 방식

const mysql = require('mysql2');

const connection = mysql.createConnection({
    host     : '192.168.100.5',
    user     : 'vegas',
    password : '!mgrsol123',
    database : 'testdb_minjun'
  });

connection.connect();

connection.query('SELECT * from employee', results);


function results(error, results, fields) {
  if (error) throw error;
    console.log('employee info is: ', results);
    console.log('database.ts gogo!')

  connection.end();
}


  /*
    call back 함수를 통해 비동기를 마치 동기처럼 할 수 있으나 콜백 지옥이 펼쳐진다
    가독성도 떨어지고.
  */
  
  
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  2. promise 방식
  
 const mysql = require('mysql2');

const connection = mysql.createConnection({
    host     : '192.168.100.5',
    user     : 'vegas',
    password : '!mgrsol123',
    database : 'testdb_minjun'
  });

connection.promise().query("SELECT * from employee")
  .then(([rows, fields]) => {
    console.log(rows);
  })
  .catch(console.log)
  .then(() => connection.end());


/*
    promise 객체 방식은 어떤 값이 생성 되었을때 그 값을 대신하는 대리자이다.
    비동기 연산이 종료된 이후에 그 결과 값이나 에러 처리는 바로 알 수 없고, 프로미스 객체에 남겨 두었다가
    그다음 어떤 시점에서 결과를 사용할 수 있도록 한다.

    가독성이 비교적 좋다.
*/

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

3. asnyc await

const mysql = require('mysql2/promise');

const pool = mysql.createPool({
  host     : '192.168.100.5',
  user     : 'vegas',
  password : '!mgrsol123',
  database : 'testdb_minjun'
});

async function start() {
  try{
    const connection = await pool.getConnection();
    const res = await connection.query('SELECT * from employee');
    console.log(res)
    connection.release();
    pool.end();
  } catch(e){

  }
}

start();

/*
  ES2017부터 나온 방식으로 promise를 대체한다.
  
*/
